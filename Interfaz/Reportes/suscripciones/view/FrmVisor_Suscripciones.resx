<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn3BwAKd7ewCofX0AcXmrAH98vAAfPewADjD3AA4w+AARMvcAEzT3ABc39wAfPfAAGjr2AB48
        9AARM/gAEzT4ACM/5AAkPesAID/1ADZQ6QA2UO8AJEL1ACZE9wArSPIAK0n0AC5L9AApR/gAMU73ADZR
        8AA4UvUAP1j1AEpa3AB2d8wARVztAEBa8QBGX/IAQVz5AFBm7gBTaO8AV2vtAElh9gBLZPkAVGn0AFds
        9QBXb/oAXHP6AG185wBoeukAa37tAGx88QB7gKcAdIPmAHmK6wB4ifcAcIT6AH2O+ACqgYEArYWFAK6J
        iQCvjIwAsI6OALKRkQC1lZUAtpmZALmamgC/mZkAoZCnAK2lpQCwp6cAvqKiAL+kpAC0rKwAxKKiAMGm
        pgDFpaUAwaqqAMeoqADFra0AyKqqAMmtrQDKsbEAzLKyAMu2tgDMt7cAzbq6AM69vQDQv78Ai5TeALm6
        3QCCkekAi5npAIGQ9QCFlvoAkp3zAJah5QCTovsAlKP7AJyq/ACiq+UApK3lAK+35QC1uOAAub/jAL7H
        /QDRwcEA0sTEANXFxQDVyMgA18zMANnKygDZzs4AzMrYANnR0QDa1NQA3NXVAN3Z2QDf3NwA5traAOLd
        3QDm3t4A6N3dAOzf3wDEyOcA0c/jANfY4gDd3eIA2NrmANTU7gDb3OkA1tXxANDT9wDX2PUA5t/iAOLf
        5ADp4uIA7eHhAOrl5QDu5OQA5OHsAOro6ADv6ekA7u7uAPDl5QDx6ekA8uzsAPTt7QDk6P4A9vHxAPX0
        9AD48/MA+fX1APPz/AD19v4A+vj4APz6+gD+/v4A/9KxAP/l0QD///8AAAAAAC8DAABQBAAAcAYAAJAJ
        AACwCgAAzwwAAPAOAAD/IBIA/z4xAP9cUQD/enEA/5eRAP+2sQD/1NEA////AAAAAAAvAA4AUAAXAHAA
        IQCQACsAsAA2AM8AQADwAEkA/xFaAP8xcAD/UYYA/3GcAP+RsgD/scgA/9HfAP///wAAAAAALwAgAFAA
        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
        AD//gAB//4AA//+AAf//////
</value>
  </data>
</root>